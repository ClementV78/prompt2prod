name: Build, Test and Deploy

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  REGISTRY: ghcr.io

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-test.txt

      - name: Run unit tests
        run: |
          echo "üß™ Running unit tests..."
          PYTHONPATH=. pytest tests/unit/ -v --cov=src --cov-report=term-missing --cov-report=xml --junitxml=test-results.xml

      - name: Run security tests
        run: |
          echo "üîí Running security tests..."
          PYTHONPATH=. pytest tests/security/ -v -m security

      - name: Security scan with Bandit
        run: |
          echo "üêç Running Bandit security scan..."
          bandit -r src/ -f json -o bandit-report.json -ll || true
          bandit -r src/ -ll

      - name: Dependency vulnerability scan
        run: |
          echo "üîç Running dependency vulnerability scan..."
          safety check --output json > safety-report.json || true
          safety check

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: |
            test-results.xml
            coverage.xml
            bandit-report.json
            safety-report.json

  build:
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      # Checkout du code
      - name: Checkout repository
        uses: actions/checkout@v4

      # Set lowercase owner name
      - name: set lower case owner name
        run: |
          echo "OWNER_LC=${OWNER,,}" >>${GITHUB_ENV}
        env:
          OWNER: "${{ github.repository_owner }}"

      # Setup Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Login to GitHub Container Registry
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Build and push Docker image
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: |
            ${{ env.REGISTRY }}/${{ env.OWNER_LC }}/prompt2prod:latest
            ${{ env.REGISTRY }}/${{ env.OWNER_LC }}/prompt2prod:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Verify Docker image
      - name: Test Docker image
        run: |
          echo "üê≥ Testing Docker image..."
          # Test que l'image d√©marre correctement
          docker run --rm -d --name test-container \
            -p 8080:8000 \
            -e KGATEWAY_ENDPOINT="http://test:80" \
            ${{ env.REGISTRY }}/${{ env.OWNER_LC }}/prompt2prod:${{ github.sha }}
          
          # Attendre que le container d√©marre
          sleep 10
          
          # Test du health check
          curl -f http://localhost:8080/health || (docker logs test-container && exit 1)
          curl -f http://localhost:8080/ || (docker logs test-container && exit 1)
          
          # Nettoyer
          docker stop test-container
          
          echo "‚úÖ Docker image test passed"

      # Summary
      - name: Deployment Instructions
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          echo "üöÄ Build completed! To deploy locally:"
          echo ""
          echo "1. Pull the new image:"
          echo "   docker pull ${{ env.REGISTRY }}/${{ env.OWNER_LC }}/prompt2prod:${{ github.sha }}"
          echo ""
          echo "2. Deploy to your local K3s cluster:"
          echo "   export IMAGE_TAG=\"${{ env.REGISTRY }}/${{ env.OWNER_LC }}/prompt2prod:${{ github.sha }}\""
          echo "   envsubst < k8s/base/app/deployment.yaml | kubectl apply -f -"
          echo "   kubectl apply -R -f k8s/base/"
          echo ""
          echo "3. Check rollout status:"
          echo "   kubectl rollout status deployment/app -n prompt2prod"

  # Self-hosted runner deployment
  deploy-self-hosted:
    needs: [test, build]
    runs-on: self-hosted
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Deploy to K3s
        run: |
          # Test kubectl connection (should work on self-hosted runner)
          echo "üîç Testing cluster connectivity..."
          kubectl cluster-info

          # Update image tag in deployment
          export IMAGE_TAG="${{ env.REGISTRY }}/${{ env.OWNER_LC }}/prompt2prod:${{ github.sha }}"
          envsubst < k8s/base/app/deployment.yaml | kubectl apply -f -

          # Apply all manifests
          kubectl apply -R -f k8s/base/

          # Wait for rollout
          kubectl rollout status deployment/app -n prompt2prod --timeout=5m

          # Show status
          kubectl get pods -n prompt2prod -o wide

  # Codespace deployment with K3s container (lightweight Alpine)
  deploy-codespace:
    needs: [test, build]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install k3d
        run: |
          curl -s https://raw.githubusercontent.com/k3d-io/k3d/main/install.sh | bash

      - name: Start K3d cluster
        run: |
          echo "üöÄ Starting k3d cluster..."
          k3d cluster create ci \
            --servers 1 \
            --agents 1 \
            --wait

          # Export kubeconfig for later steps
          export KUBECONFIG=$(k3d kubeconfig write ci)
          echo "KUBECONFIG=$KUBECONFIG" >> $GITHUB_ENV

          kubectl cluster-info
          kubectl get nodes -o wide

      - name: Setup KGateway
        run: |
          echo "‚öôÔ∏è Installing KGateway..."
          ./scripts/setup-kgateway.sh
          kubectl wait --for=condition=available --timeout=300s deployment/kgateway -n kgateway-system
      - name: Create namespace
        run: |
          kubectl create namespace prompt2prod --dry-run=client -o yaml | kubectl apply -f -
      - name: Create OpenAI Secret
        run: |
          kubectl create secret generic openai-secret-app \
            --from-literal=Authorization=${{ secrets.OPENAI_API_KEY }} \
            -n prompt2prod --dry-run=client -o yaml | kubectl apply -f -
      - name: Deploy Application
        run: |
          echo "üì¶ Deploying application..."
          export IMAGE_TAG="${{ env.REGISTRY }}/${{ env.OWNER_LC }}/prompt2prod:${{ github.sha }}"
          envsubst < k8s/base/app/deployment.yaml | kubectl apply -f -

          kubectl apply -R -f k8s/base/

      - name: Wait for deployment
        run: |

          # Surveillance du d√©ploiement
          SECONDS=0
          TIMEOUT=600
          while [ $SECONDS -lt $TIMEOUT ]; do
            echo "‚è≥ $(date +%T) - √âtat des pods dans prompt2prod:"
            kubectl get pods -n prompt2prod -o wide
            echo "--------------------------------------"

            # V√©rifie si un pod est en erreur
            if kubectl get pods -n prompt2prod | grep -E 'Error|CrashLoopBackOff|ImagePullBackOff'; then
              echo "‚ùå Pod en erreur d√©tect√©, debug..."
              kubectl describe pods -n prompt2prod || true
              kubectl get events -n prompt2prod --sort-by=.lastTimestamp | tail -20 || true
              for pod in $(kubectl get pods -n prompt2prod --no-headers | grep -E 'Error|CrashLoopBackOff|ImagePullBackOff' | awk '{print $1}'); do
                echo "üîç Logs du pod $pod:"
                kubectl logs -n prompt2prod $pod || true
              done
              exit 1
            fi

            # V√©rifie si le d√©ploiement est pr√™t
            if kubectl rollout status deployment/app -n prompt2prod --timeout=5s >/dev/null 2>&1; then
              echo "‚úÖ D√©ploiement termin√© avec succ√®s"
              break
            fi

            sleep 10
          done

          if [ $SECONDS -ge $TIMEOUT ]; then
            echo "‚è∞ Timeout de $TIMEOUT secondes atteint"
            kubectl describe deployment app -n prompt2prod || true
            kubectl describe pods -n prompt2prod || true
            exit 1
          fi

      - name: Run Integration Tests
        run: |
          echo "üß™ Running integration tests..."
          
          # Attendre que l'API soit accessible via port-forward
          echo "‚è≥ Setting up port-forward to API..."
          kubectl port-forward service/app -n prompt2prod 8080:80 > port-forward.log 2>&1 &
          PORT_FORWARD_PID=$!
          echo "Port-forward PID: $PORT_FORWARD_PID"
          
          # Attendre que le port-forward soit √©tabli
          sleep 10
          
          # V√©rifier que le processus port-forward est toujours actif
          if ! kill -0 $PORT_FORWARD_PID 2>/dev/null; then
            echo "‚ùå Port-forward process died, checking logs..."
            cat port-forward.log
            exit 1
          fi
          
          echo "‚è≥ Waiting for API to be ready..."
          RETRY_COUNT=0
          MAX_RETRIES=20
          while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
            if curl -f http://localhost:8080/health > /dev/null 2>&1; then
              echo "‚úÖ API is ready on port 8080"
              API_URL="http://localhost:8080"
              break
            fi
            echo "üîÑ Retry $((RETRY_COUNT + 1))/$MAX_RETRIES... (waiting 5s)"
            sleep 5
            RETRY_COUNT=$((RETRY_COUNT + 1))
          done
          
          if [ $RETRY_COUNT -eq $MAX_RETRIES ]; then
            echo "‚ùå API not accessible after $MAX_RETRIES retries"
            echo "Port-forward logs:"
            cat port-forward.log
            echo "Service status:"
            kubectl get services -n prompt2prod
            kubectl get pods -n prompt2prod
            kubectl logs -n prompt2prod deployment/app --tail=50
            kill $PORT_FORWARD_PID || true
            exit 1
          fi
          
          # Installer pytest pour les tests d'int√©gration
          python -m pip install --upgrade pip
          pip install pytest pytest-asyncio httpx
          
          # V√©rification finale avant les tests
          echo "üîç Final API check before running tests..."
          curl -v http://localhost:8080/health || echo "Health check failed but continuing..."
          sleep 2
          
          # Ex√©cuter les tests d'int√©gration
          export API_URL="$API_URL"
          echo "Running integration tests with API_URL: $API_URL"
          PYTHONPATH=. pytest tests/integration/ -v -m integration --tb=short -x
          
          echo "‚úÖ Integration tests completed!"
          
          # Nettoyer le port-forward
          kill $PORT_FORWARD_PID || true

      - name: Show Deployment Status
        run: |
          echo "‚úÖ Deployment and tests completed!"
          kubectl get pods -n prompt2prod -o wide
          kubectl get services -n prompt2prod
          
          echo "üåê API accessible via: kubectl port-forward service/app -n prompt2prod 8080:80"
          echo "üìö Then visit: http://localhost:8080/docs for Swagger UI"

      - name: Cleanup cluster
        if: always()
        run: |
          echo "üßπ Cleaning up k3d cluster..."
          k3d cluster delete ci
